plugins {
    id("com.android.application")
    id("kotlin-android")
    id("com.google.protobuf") version "0.8.13"
}
ext.versionMajor = null
ext.versionMinor = 0
ext.versionPatch = 1
ext.versionClassifier = null
ext.isSnapshot = true
ext.minimumSdkVersion = 26

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        //buildPltd()
        setVersionNumberByTag()
        applicationId 'co.anode.anodium'
        minSdkVersion 26
        targetSdkVersion 30
        versionCode = generateVersionCode()
        versionName = generateVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    def isRunningOnTravis = System.getenv("CI") == "true"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }

    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../tools/android_key")
        signingConfigs.release.storePassword = System.getenv("ANODE_CONFIDENTIAL_password0")
        signingConfigs.release.keyAlias = System.getenv("ANODE_CONFIDENTIAL_alias")
        signingConfigs.release.keyPassword = System.getenv("ANODE_CONFIDENTIAL_password1")
    }
}
//  Needed for gRPC
sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}
// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3]

//  Needed for gRPC
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.13.0"
    }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.34.1'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
            task.plugins {
                grpc {
                    // This will generate the ServiceGrpc
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.so'])

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.protobuf:protobuf-javalite:4.0.0-rc-2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.21"
    implementation 'com.dampcake:bencode:1.3.1'
    implementation 'org.apache.commons:commons-text:1.9' //Random String Generator
    //implementation "com.android.support:support-compat:28.0.0" //Required for notifications
    // gRPC implementation to communicate with lnd
    implementation 'io.grpc:grpc-okhttp:1.39.0'
    implementation 'io.grpc:grpc-protobuf-lite:1.39.0'
    implementation 'io.grpc:grpc-stub:1.39.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.gson:gson:2.8.7'
    compileOnly 'com.google.api.grpc:googleapis-common-protos:0.0.3'
    // Asynchronous programming library
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation 'commons-codec:commons-codec:20041127.091804'
}
repositories {
    mavenCentral()
}

private Integer generateVersionCode() {
    return ext.minimumSdkVersion * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

private String generateVersionName() {
    String versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    /*
    if (ext.versionClassifier == null) {
        if (isSnapshot) {
            versionClassifier = "SNAPSHOT"
        }
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + versionClassifier
    }
     */
    return versionName;
}

private String setVersionNumberByTag() {
    /*
 * Gets the version name from the latest Git tag
 */
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', 'HEAD'
        standardOutput = stdout
    }
    def String verByGit = stdout.toString().tokenize("-")[1].trim()
    def (major, minor, patch) = verByGit.tokenize(".");
    ext.versionMajor = Integer.parseInt(major);
    ext.versionMinor = Integer.parseInt(minor);
    ext.versionPatch = Integer.parseInt(patch);
}

private void buildPltd() {
    def stdout = new ByteArrayOutputStream()

    exec {
        ignoreExitValue true
        commandLine 'sh', './pltd_build.sh'
    }
    print(stdout.toString())
}