plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}
ext.versionMajor = null
ext.versionMinor = 0
ext.versionPatch = 1
ext.versionClassifier = null
ext.isSnapshot = true
ext.minimumSdkVersion = 26

android {
    compileSdkVersion 33

    defaultConfig {
        buildPld()
        setVersionNumberByTag()
        applicationId 'co.anode.anodium'
        minSdkVersion 26
        targetSdkVersion 33
        versionCode = generateVersionCode()
        versionName = generateVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    def isRunningOnTravis = System.getenv("CI") == "true"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }
    buildFeatures {
        viewBinding = true
    }

    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../tools/android_key")
        signingConfigs.release.storePassword = System.getenv("ANODE_CONFIDENTIAL_password0")
        signingConfigs.release.keyAlias = System.getenv("ANODE_CONFIDENTIAL_alias")
        signingConfigs.release.keyPassword = System.getenv("ANODE_CONFIDENTIAL_password1")
        if (System.getenv("PLAYSTORE_BUILD") == null) {
            def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
            def allFilesFromDir = new File(tmpFilePath).listFiles()

            if (allFilesFromDir != null) {
                def keystoreFile = allFilesFromDir.first()
                keystoreFile.renameTo("keystore/your_keystore.jks")
            }
            storeFile = file("keystore/your_keystore.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
    namespace 'co.anode.anodium'
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3]


dependencies {
    implementation project(path: ':pkt')
    implementation project(path: ':pkt_domain')
    implementation project(path: ':pkt_dummy')
    /*implementation fileTree(dir: 'libs', include: ['*.jar'])*/
    implementation fileTree(dir: 'libs', include: ['*.so'])
    //AndroidX Libraries
    implementation 'androidx.appcompat:appcompat:1.5.0'
    //Layouts
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    //Material textfield for password fields
    implementation 'com.google.android.material:material:1.6.1'
    //Bottom navigation bar
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'
    //Steps for wizardlike steps in creating wallet process
    compileOnly 'com.anton46:stepsview:0.0.2'
    implementation 'com.anton46:stepsview:0.0.2'
    //Checking password strength for showing user feedback when creating password for wallet
    compileOnly 'com.github.yesterselga:password-strength-checker-android:v1.0'
    implementation 'com.github.yesterselga:password-strength-checker-android:v1.0'

    //For storing and accessing wallet PIN and password
    implementation 'androidx.security:security-crypto-ktx:1.1.0-alpha03'
    //Volley for API calls
    implementation 'com.android.volley:volley:1.2.1'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

/*    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'*/

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    //New screens integration
    def hilt_version = "2.43.2"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
}
repositories {
    mavenCentral()
}

private Integer generateVersionCode() {
    return ext.minimumSdkVersion * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

private String generateVersionName() {
    String versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    return versionName;
}

private String setVersionNumberByTag() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--tags', '--max-count=1'
        standardOutput = stdout
    }
    def tag = stdout.toString().trim()
    exec {
        commandLine 'git', 'describe', '--tags', tag
        standardOutput = stdout
    }
    def String verByGit = stdout.toString().tokenize("-")[1].trim()
    def (major, minor, patch) = verByGit.tokenize(".");
    ext.versionMajor = Integer.parseInt(major);
    ext.versionMinor = Integer.parseInt(minor);
    ext.versionPatch = Integer.parseInt(patch);
}

private void buildPld() {
    def stdout = new ByteArrayOutputStream()

    exec {
        ignoreExitValue true
        commandLine 'sh', './pltd_build.sh'
    }
    print(stdout.toString())
}